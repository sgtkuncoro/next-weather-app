{"version":3,"file":"static/webpack/static/development/pages/Index.js.597a90f83d4336cdb585.hot-update.js","sources":["webpack:///./pages/Index.jsx"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\n\nimport Global from \"../components/Global\";\nimport CurrentWeather from \"../components/sections/CurrentWeather\";\n\nrequire(\"dotenv\").config();\n\nconst WEATHER_API_KEY = process.env.WEATHER_API_KEY;\nconst WEATHER_API_URL = process.env.WEATHER_API_URL;\n\nexport default class Index extends React.Component {\n  state = {\n    activeCity: \"Jakarta\",\n    user: null,\n    forecast: [],\n    temperatureUnits: \"metric\",\n    temperatureClass: \"\",\n    savedCities: null,\n    loading: false\n  };\n\n  /** Mount original city  */\n  async componentDidMount() {\n    await this.apiRequest(this.state.activeCity);\n  }\n\n  /** Yahoo! Weather API request  */\n  async apiRequest(cityName) {\n    this.setState({ loading: true });\n    const locationUrl = `${WEATHER_API_URL}/weather?q=${cityName}&units=${\n      this.state.temperatureUnits\n    }&appid=${WEATHER_API_KEY}`;\n\n    await axios\n      .get(locationUrl)\n      .then(result => {\n        const currentConditions = result.data;\n        this.setState({\n          cityName: currentConditions.name,\n          temp: currentConditions.main.temp,\n          iconId: currentConditions.weather[0].id,\n          description: currentConditions.weather[0].main,\n          humidity: currentConditions.main.humidity,\n          time: currentConditions.dt,\n          high: currentConditions.main.temp_max,\n          low: currentConditions.main.temp_min,\n          sunrise: currentConditions.sys.sunrise,\n          sunset: currentConditions.sys.sunset,\n          windSpeed: `${currentConditions.wind.speed} ${\n            this.state.temperatureUnits === \"metric\" ? \"m/s\" : \"mph\"\n          }`\n        });\n        this.setTemperatureClass();\n      })\n      .catch(err => {\n        this.setState({ loading: false });\n        console.log(err);\n      });\n    const forecastUrl = `${WEATHER_API_URL}/forecast?q=${cityName}&units=${\n      this.state.temperatureUnits\n    }&appid=${WEATHER_API_KEY}`;\n\n    axios.get(forecastUrl).then(result => {\n      console.log(result);\n      this.setState({ forecast: result.data.list, loading: false });\n    });\n  }\n\n  /** App city search bar functions  */\n  handleChange(e) {\n    e.preventDefault();\n    this.setState({\n      activeCity: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.apiRequest(this.state.activeCity);\n  }\n\n  /** Set temperature class for color combos  */\n  convertTemperature() {\n    if (this.state.temperatureUnits === \"metric\") {\n      return (this.state.temp * 9) / 5 + 32;\n    } else {\n      return this.state.temp;\n    }\n  }\n\n  setTemperatureClass() {\n    let temp = this.convertTemperature();\n    if (temp >= 100) {\n      this.setState({\n        temperatureClass: \"boiling\"\n      });\n    }\n    if (temp < 100 && temp >= 85) {\n      this.setState({\n        temperatureClass: \"hot\"\n      });\n    }\n    if (temp < 85 && temp >= 65) {\n      this.setState({\n        temperatureClass: \"warm\"\n      });\n    }\n    if (temp < 65 && temp >= 50) {\n      this.setState({\n        temperatureClass: \"perfect\"\n      });\n    }\n    if (temp < 50 && temp >= 32) {\n      this.setState({\n        temperatureClass: \"cool\"\n      });\n    }\n    if (temp < 32) {\n      this.setState({\n        temperatureClass: \"freezing\"\n      });\n    }\n  }\n\n  /** Toggle Celsius and Fahrenheit */\n  changeUnits() {\n    setTimeout(() => {\n      this.state.temperatureUnits === \"imperial\"\n        ? this.setState({ temperatureUnits: \"metric\" })\n        : this.setState({ temperatureUnits: \"imperial\" });\n      this.apiRequest(this.state.activeCity);\n    });\n  }\n\n  /** Add city to database */\n  handleAddCity(e) {\n    e.preventDefault();\n    if (this.state.user != null) {\n      this.citiesRef.push({\n        city: this.state.activeCity,\n        user: this.state.user.email\n      });\n    }\n    this.handleSavedCities();\n  }\n\n  handleCityClick(city) {\n    this.setState({ activeCity: city });\n    this.apiSearch(city);\n  }\n\n  render() {\n    return (\n      <Global>\n        <Head>\n          <title>Next Weather</title>\n        </Head>\n        <CurrentWeather\n          city={this.state.cityName}\n          temp={this.state.temp}\n          iconId={this.state.iconId}\n          description={this.state.description}\n          loading={this.state.loading}\n        />\n      </Global>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;AAUA;;;;;;;;;;AAEA;AACA;;;;;;;;;;;;;;;AAEA;AACA;;;;;;AAAA;;;;;;;;AACA;AAAA;AAAA;AACA;;AAIA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAcA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;AA5JA;AACA;;;;;A","sourceRoot":""}